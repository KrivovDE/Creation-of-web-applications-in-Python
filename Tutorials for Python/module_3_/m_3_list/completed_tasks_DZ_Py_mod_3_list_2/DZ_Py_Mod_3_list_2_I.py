# # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TASK 1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# # Вашему другу, который тоже начал изучать Python, преподаватель дал такую
# # задачу: есть три списка — основной и два побочных. В основном лежат элементы
# # [1, 5, 3], а в побочных — [1, 5, 1, 5] и [1, 3, 1, 5, 3, 3] соответственно.
# # Первый побочный закидывается в основной, там считается количество цифр 5,
# # количество выводится на экран, и затем они удаляются из основного списка.
# # После этого в основной закидывается второй побочный список, там считается
# # количество цифр 3 и выводится на экран. В конце также выводится и сам список.
#
#
# a = [1, 5, 3]
# b = [1, 5, 1, 5]
# c = [1, 3, 1, 5, 3, 3]
#
# a.extend(b)
# print(f'Кол-во цифр 5 при первом объединении: {a.count(5)}')
#
# [a.remove(5) for i in a if i == 5]
# a.extend(c)
# print(f'Кол-во цифр 3 при втором объединении: {a.count(3)}\n'
#       f'Итоговый список: {a}')
#
#
# # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TASK 2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# # Два класса стоят в две отдельные шеренги. В каждом классе ученики выстроены
# # по росту (по возрастанию): в одном классе от 160 см до 176 см с шагом 2,
# # во втором классе — от 162 см до 180 см с шагом 3. Спустя какое-то время
# # два класса объединяют в одну шеренгу и тоже выстраивают их по возрастанию.
# # Напишите программу, которая генерирует списки роста для каждого в классе,
# # затем объединяет их в один список и сортирует его в порядке возрастания.
# # Выведите отсортированный список на экран.
#
# a = [i for i in range(160, 177, 2)]
# b = [i for i in range(162, 181, 2)]
# a.extend(b)
# a.sort()
# print(a)
#
#
# # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TASK 3~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# # В базе данных магазина всякой всячины хранится список названий деталей и
# # их стоимостей:
# # shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300], ['педаль', 100],
# # ['седло', 1500], ['рама', 12000], ['обод', 2000], ['шатун', 200],
# # ['седло', 2700]]
# # Продавец решил, что считать количество и стоимость деталей вручную не очень
# # удобно, поэтому решил попросить помощи у программиста, чтобы оптимизировать
# # этот процесс.
# # Напишите программу, которая запрашивает у пользователя деталь, считает их
# # количество, а также общую стоимость.
#
# shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300], ['педаль', 100],
#         ['седло', 1500], ['рама', 12000], ['обод', 2000], ['шатун', 200],
#         ['седло', 2700]]
#
# request = input('Товар --> ')
# count = 0
# price = 0
# for i in range(len(shop)):
#     if shop[i][0] == request:
#         count += 1
#         price += shop[i][1]
#
# print(f'Кол-во: {count}\n'
#       f'Общая цена: {price}')


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TASK 4~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Последовательность чисел называется симметричной, если она одинаково читается
# как слева направо, так и справа налево. Например, следующие
# последовательности являются симметричными:
# 123454321    12122121
# Пользователь вводит последовательность из N чисел.Напишите программу,
# которая определяет, какое минимальное количество и каких чисел надо приписать
# в конец той последовательности, чтобы она стала симметричной.


start = [int(i) for i in input('Числа нужно ввести через пробел\n'
                               '--> ').split()]
for i in range(len(start)):
    if start[i:] == start[i:][::-1]:
        end = start[:i][::-1]
        break

print(f'Последовательность: {start}\n'
      f'Нужно прописать чисел: {len(end)}\n'
      f'Сами числа: {end}')


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TASK 5~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить
# часть фильмов в список любимых, чтобы позже прочитать рецензии на них.
# Напишите программу, в которой пользователь вводит фильм. Если он есть в
# перечне, то добавляется в список любимых. Если его нет, то выводится ошибка.
# В конце выведите весь список любимых фильмов.

films = ['Крепкий орешек', 'Назад в будущее', 'Таксист', 'Леон',
    'Богемская рапсодия', 'Город грехов', 'Мементо', 'Отступники', 'Деревня']

how_requests = int(input('Сколько фильмов хотите добавить?\n'
                         '--> '))
like_flm = []
while how_requests != 0:
    request = input('Введите название фильма: ')
    if request in films:
        like_flm.append(request)
        how_requests -= 1
    else:
        print('У нас нет такого фильма :,(')

print(f'Ваш список любимых фильмов: {like_flm}')


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TASK 6~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# В одной IT-компании существует негласный закон об именовании текстовых
# документов:
# 1. Название файла не должно начинаться на один из специальных символов:
# @№$%^&*().
# 2. Файл заканчивается расширением .txt или .docx.
# Напишите программу, которая получает на вход полное название файла и
# проверяет его по этим правилам.

from re import findall

file = input('Введите название файла\n'
             '--> ')

if findall(r'[@№$%^&*(]', file):
    print('Ошибка: название начинается на один из специальных символов.')
elif not findall(r'.txt|.docx', file):
    print('Ошибка: неверное расширение файла. Ожидалось .txt или .docx.')
else:
    print('Файл назван верно.')
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TASK 7~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# С увеличением объёма данных возникла потребность в сжатии этих данных без
# потери важной информации. Для этого было придумано кодирование, которое
# осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2',
# то есть группы одинаковых символов исходной строки заменяются на этот символ
# и количество его повторений в этой позиции строки.
# Напишите программу, которая считывает строку, кодирует её предложенным
# алгоритмом и выводит закодированную последовательность на экран.
# Кодирование должно учитывать регистр символов.
# Пример:
# Введите строку: aaAAbbсaaaA
# Закодированная строка: 2aA2b2с1a3A1

_str = input('Введите строку\n'
             '--> ') + ' '
cnt = 0
rslt = ''

for i in _str:
    if _str[0] != i:
        rslt += _str[0] + str(cnt)
        cnt = 0
        _str = i
    cnt += 1

print(rslt)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TASK 8~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# При написании клиент-серверного приложения часто приходится работать с
# IP-адресами. IP-адрес состоит из четырёх целых чисел в диапазоне от 0 до 255,
# разделённых точками.
# Пользователь вводит строку. Напишите программу, которая определяет, является
# ли заданная строка правильным IP-адресом. Обеспечьте контроль ввода, где
# предусматривается ввод целых чисел от 0 до 255, а также точки между ними.

user_ip = input('Введите IP: ')
err = False

if not user_ip.count('.') == 3:
    print('IP-адрес состоит из четырёх целых чисел, разделённых точками.')
    err = True
else:
    user_ip = user_ip.split('.')
    ip = []
    for i in user_ip:
        try:
            ip.append(int(i))
        except:
            print(f'{i} - не число.')
            err = True
    for i in ip:
        if i < 0 or i > 255:
            print(f'{i} - не в диапозоне чисел [0;255].')
            err = True
    if len(ip) != 4:
        print('IP-адрес состоит из четырёх целых чисел.')
        err = True
    if err == False:
        print('IP-адрес корректен.')