# СПИСКИ
# Задача 1. Страшный код
# Вашему другу, который тоже начал изучать Python, преподаватель дал такую
# задачу: есть три списка — основной и два побочных. В основном лежат элементы
# [1, 5, 3], а в побочных — [1, 5, 1, 5] и [1, 3, 1, 5, 3, 3] соответственно.
# Первый побочный закидывается в основной, там считается количество цифр 5,
# количество выводится на экран, и затем они удаляются из основного списка.
# После этого в основной закидывается второй побочный список, там считается
# количество цифр 3 и выводится на экран. В конце также выводится и сам список.
# Из интереса вы попросили вашего друга показать код его программы и поняли,
# что сделали это не зря — то, что вы увидели, повергло вас в шок и ужас.
# Вот сам код:
#
# Используя знания о методах списков, а также о стиле программирования,
# помогите другу переписать программу. Не используйте дополнительные списки.
# Результат работы программы:
# Кол-во цифр 5 при первом объединении: 3
# Кол-во цифр 3 при втором объединении: 4
# Итоговый список: [1, 3, 1, 1, 1, 3, 1, 5, 3, 3]

lst_first, lst_second, lst_third = [1, 5, 3], [1, 5, 1, 5], [1, 3, 1, 5, 3, 3]
lst_first_second = lst_first + lst_second
lst_first_third = [i for i in lst_first_second if i != 5] + lst_third
print(
    f"Кол-во цифр 5 при первом объединении: {lst_first_second.count(5)}\n"
    f"Кол-во цифр 3 при втором объединении: {lst_first_third.count(3)}\n"
    f"{lst_first_third}",
)

# Задача 2. Шеренга
# Два класса стоят в две отдельные шеренги. В каждом классе ученики выстроены
# по росту (по возрастанию): в одном классе от 160 см до 176 см с шагом 2,
# во втором классе — от 162 см до 180 см с шагом 3. Спустя какое-то время
# два класса объединяют в одну шеренгу и тоже выстраивают их по возрастанию.
# Напишите программу, которая генерирует списки роста для каждого в классе,
# затем объединяет их в один список и сортирует его в порядке возрастания.
# Выведите отсортированный список на экран.

class_first = [i for i in range(160, 177, 2)]
class_second = [i for i in range(162, 180, 3)]
general = class_first + class_second
general.sort()
print(general)  # дублированные значения убирать не просили по этому оставлю

# Задача 3. Детали
# В базе данных магазина всякой всячины хранится список названий деталей и
# их стоимостей:
#
# Продавец решил, что считать количество и стоимость деталей вручную не очень
# удобно, поэтому решил попросить помощи у программиста, чтобы оптимизировать
# этот процесс.
# Напишите программу, которая запрашивает у пользователя деталь, считает их
# количество, а также общую стоимость.

shop = [
    ["каретка", 1200],
    ["шатун", 1000],
    ["седло", 300],
    ["педаль", 100],
    ["седло", 1500],
    ["рама", 12000],
    ["обод", 2000],
    ["шатун", 200],
    ["седло", 2700],
]
odr = input("Введите товар: ").lower()

cnt = [[i for i, j in shop if i == odr], [j for i, j in shop if i == odr]]

print(f"Количество товаров - {len(cnt[0])}\nСумма товаров - {sum(cnt[1])}")

# Задача 4. Симметричная последовательность
# Последовательность чисел называется симметричной, если она одинаково читается
# как слева направо, так и справа налево. Например, следующие последовательности
# являются симметричными:
#
# Пользователь вводит последовательность из N чисел. Напишите программу, которая
# определяет, какое минимальное количество и каких чисел надо приписать в конец
# этой последовательности, чтобы она стала симметричной.
# Пример 1:
# Последовательность: [1, 2, 1, 2, 2]
# Нужно приписать чисел: 3
# Сами числа: [1, 2, 1]
#
# Пример 2:
# Последовательность: [1, 2, 3, 4, 5]
# Нужно приписать чисел: 4
# Сами числа: [4, 3, 2, 1]

answer = list(input("Введите последовательность: "))
print(f"Последовательность{answer}")
cnt = 0
for i in range(len(answer) - 1):
    if not answer == answer[::-1]:
        answer.insert(len(answer) - i, answer[i])
        cnt += 1
print(f"Нужно приписать чисел: {cnt}\nСами числа: {answer[-cnt:]}")

# Задача 5. Кино
# Илья зашёл на любительский киносайт, на котором пользователи оставляют
# рецензии на фильмы. Их список:
# films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’, ‘Богемская
# рапсодия’, ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]
#
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить
# часть фильмов в список любимых, чтобы позже прочитать рецензии на них.
# Напишите программу, в которой пользователь вводит фильм. Если он есть в
# , то добавляется в список любимых. Если его нет, то выводится ошибка. В конце
# выведите весь список любимых фильмов.

# Пример:
# Сколько фильмов хотите добавить? 3
# Введите название фильма: Леон
# Введите название фильма: Безумный Макс
# Ошибка: фильма Безумный Макс у нас нет :(
# Введите название фильма: Мементо
# Ваш список любимых фильмов: Леон, Мементо


films = [
    "Крепкий орешек",
    "Назад в будущее",
    "Таксист",
    "Леон",
    "Богемскаярапсодия",
    "Город грехов",
    "Мементо",
    "Отступники",
    "Деревня",
]
lst_films = []
try:
    for i in range(int(input("Сколько фильмов хотите добавить? "))):
        choice = input("Введите название фильма: ").capitalize()
        if (
            choice in films and choice not in lst_films
        ):  # БЫЛО БЫ УДОБНЕЕ (choice in films and not lst_films)
            lst_films.append(
                choice,
            )  # но почему то не получается так возможно записать?
        elif choice in lst_films:
            print(f"Фильм {choice} уже есть в вашем списке")
        else:
            print(f"Ошибка: фильма {choice} у нас нет :(")
    print(f'Ваш список любимых фильмов: {", ".join(lst_films)}')
except ValueError:
    print("На ввод подаются цифры")

# СТРОКИ
# Задача 6. Файлы
# В одной IT-компании существует негласный закон об именовании текстовых документов:
# 1.	Название файла не должно начинаться на один из специальных символов: @№$%^&*().
# 2.	Файл заканчивается расширением .txt или .docx.
# Напишите программу, которая получает на вход полное название файла и проверяет его по этим правилам.

# Пример 1: Название файла: @example.txt
# Ошибка: название начинается на один из специальных символов.
#  Пример 2: Название файла: example.ttx
# Ошибка: неверное расширение файла. Ожидалось .txt или .docx.
#  Пример 3: Название файла: example.txt
# Файл назван верно.

try:
    title = input("Введите название файла: ")
    spec_sim, *end = ["@№$%^&*().", ".txt", ".docx"]
    if title[0] in spec_sim:
        raise ValueError(
            "Ошибка: название начинается на один из " "специальных символов.",
        )
    elif title.endswith((end[0], end[1])):
        print("Файл назван верно.")
    else:
        raise ValueError(
            "Ошибка: неверное расширение файла. Ожидалось " ".txt или .docx.",
        )
except ValueError as err:
    print(err)

# Задача 7. Сжатие
# С увеличением объёма данных возникла потребность в сжатии этих данных без
# потери важной информации. Для этого было придумано кодирование, которое
# осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2',
# то есть группы одинаковых символов исходной строки заменяются на этот символ
# и количество его повторений в этой позиции строки.
# Напишите программу, которая считывает строку, кодирует её предложенным
# алгоритмом и выводит закодированную последовательность на экран.
# Кодирование должно учитывать регистр символов.

# Пример:
# Введите строку: aaAAbbсaaaA
# Закодированная строка: a2A2b2с1a3A1

string, new_string = (
    input("Введите строку: ") + " ",
    "",
)  # Хотелось бы увидеть более оптимальное решение
cnt = 1
for i in range(len(string) - 1):
    if string[i] == string[i + 1]:
        cnt += 1
    else:
        new_string += string[i] + str(cnt)
        cnt = 1
print(new_string)

# Задача 8. IP-адрес
# При написании клиент-серверного приложения часто приходится работать с
# IP-адресами. IP-адрес состоит из четырёх целых чисел в диапазоне от 0 до
# 255, разделённых точками.
# Пользователь вводит строку. Напишите программу, которая определяет, является
# ли заданная строка правильным IP-адресом. Обеспечьте контроль ввода, где
# предусматривается ввод целых чисел от 0 до 255, а также точки между ними
# Пример 1:
# Введите IP: 128.16.35.a4
# a4 — это не целое число.
# Пример 2:
# Введите IP: 240.127.56.340
# 340 превышает 255.
# Пример 3:
# Введите IP: 34.56.42,5
# Адрес — это четыре числа, разделённые точками.
# Пример 4:
# Введите IP: 128.0.0.255
# IP-адрес корректен.

# IP = input('Введите IP: ').split('.')
# try:
#     for i in IP:
#         if not len(IP) == 4:
#             raise ValueError(f'Адрес — это четыре числа, разделённые точками.')
#         elif 0 > int(i) <= 255:
#             raise ValueError(f'{i} — превышает 255 или ниже 0.')
#         elif not i.isdigit():
#             raise ValueError(f'{i} — это не целое число.')
# except ValueError as err:
#     print(err)
# else:
#     print('IP-адрес корректен.')
