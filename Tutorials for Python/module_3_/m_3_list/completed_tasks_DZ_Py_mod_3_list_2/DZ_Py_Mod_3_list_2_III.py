# # Задача 1. Страшный код
# # Вашему другу, который тоже начал изучать Python, преподаватель дал такую задачу:
# # есть три списка — основной и два побочных.
# # В основном лежат элементы [1, 5, 3], а в побочных — [1, 5, 1, 5] и [1, 3, 1, 5, 3, 3] соответственно.
# # Первый побочный закидывается в основной, там считается количество цифр 5, количество выводится на экран,
# # и затем они удаляются из основного списка.
# # После этого в основной закидывается второй побочный список, там считается количество цифр 3 и выводится на экран.
# # В конце также выводится и сам список.
# # Из интереса вы попросили вашего друга показать код его программы и поняли,
# # что сделали это не зря — то, что вы увидели, повергло вас в шок и ужас. Вот сам код:
# # a = [1, 5, 3]
# # b = [1, 5, 1, 5]
# # c = [1, 3, 1, 5, 3, 3]
# # for i in b:
# #     a.append(i)
# # t = 0
# # for i in a:
# #     if i == 5:
# #         t += 1
# # print(t)
# # d = []
# # for i in a:
# #     if i != 5:
# #         d.append(i)
# # for i in c:
# #     d.append(i)
# # t = 0
# # for i in d:
# #     if i == 3:
# #         t += 1
# # print(t)
# # print(d)
# # Используя знания о методах списков, а также о стиле программирования, помогите другу переписать программу.
# # Не используйте дополнительные списки.
# # Результат работы программы:
# # Кол-во цифр 5 при первом объединении: 3
# # Кол-во цифр 3 при втором объединении: 4
# # Итоговый список: [1, 3, 1, 1, 1, 3, 1, 5, 3, 3]
#
# list_main = [1, 5, 3]
# list1 = [1, 5, 1, 5]
# list2 = [1, 3, 1, 5, 3, 3]
#
# list_main.extend(list1)
#
# count = list_main.count(5)
# print(f'5 after first addition: {count}')
#
# list_main = [i for i in list_main if i != 5]
#
# list_main.extend(list2)
#
# count = list_main.count(3)
# print(f'3 after second addition: {count}')
# print(list_main)
#
# # Задача 2. Шеренга
# # Два класса стоят в две отдельные шеренги. В каждом классе ученики выстроены по росту (по возрастанию):
# # в одном классе от 160 см до 176 см с шагом 2, во втором классе — от 162 см до 180 см с шагом 3.
# # Спустя какое-то время два класса объединяют в одну шеренгу и тоже выстраивают их по возрастанию.
# # Напишите программу, которая генерирует списки роста для каждого в классе,
# # затем объединяет их в один список и сортирует его в порядке возрастания. Выведите отсортированный список на экран.
#
# klass1 = [i for i in range(160, 177, 2)]
# klass2 = [i for i in range(162, 181, 3)]
#
# klass1.extend(klass2)
# klass1.sort()
#
# print(klass1)
#
# # Задача 3. Детали
# # В базе данных магазина всякой всячины хранится список названий деталей и их стоимостей:
# # shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300], ['педаль', 100],
# #         ['седло', 1500], ['рама', 12000], ['обод', 2000], ['шатун', 200], ['седло', 2700]]
# #
# # Продавец решил, что считать количество и стоимость деталей вручную не очень удобно,
# # поэтому решил попросить помощи у программиста, чтобы оптимизировать этот процесс.
# # Напишите программу, которая запрашивает у пользователя деталь, считает их количество, а также общую стоимость.
#
# shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300], ['педаль', 100],
#         ['седло', 1500], ['рама', 12000], ['обод', 2000], ['шатун', 200], ['седло', 2700]]
#
# det = input("Enter detail: ")
#
# count = 0
# total = 0
# for i in shop:
#     if i[0] == det:
#         count += 1
#         total += i[1]
# print(f'There are {count} details in shop. Its total price is {total}')
#
# # Задача 4. Симметричная последовательность
# # Последовательность чисел называется симметричной, если она одинаково читается как слева направо, так и справа налево.
# # Например, следующие последовательности являются симметричными:
# #
# # 1 2 3 4 5 4 3 2 1
# # 1 2 1 2 2 1 2 1
# #
# # Пользователь вводит последовательность из N чисел.
# # Напишите программу, которая определяет, какое минимальное количество
# # и каких чисел надо приписать в конец этой последовательности, чтобы она стала симметричной.
# #
# # Пример 1:
# # Последовательность: [1, 2, 1, 2, 2]
# # Нужно приписать чисел: 3
# # Сами числа: [1, 2, 1]
# #
# # Пример 2:
# # Последовательность: [1, 2, 3, 4, 5]
# # Нужно приписать чисел: 4
# # Сами числа: [4, 3, 2, 1]
#
# str_num = input('Enter string of numbers: ')
#
# str_num = str_num.replace(' ', '')
# lst_num = [int(i) for i in str_num]
#
# lst_res = []
# lst_rev = lst_num.copy()
# lst_rev.reverse()
# i = 0
#
# while lst_rev != lst_num + lst_res:
#     lst_res.insert(0, lst_num[i])
#     lst_rev = (lst_num + lst_res).copy()
#     lst_rev.reverse()
#     i += 1
#
# print(f'String of numbers: {lst_num}\nNeed to add {len(lst_res)} numbers\nAdding numbers: {lst_res}')

# Задача 5. Кино
# Илья зашёл на любительский киносайт, на котором пользователи оставляют рецензии на фильмы. Их список:
# films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’, ‘Богемская рапсодия’,
# ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]
#
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить часть фильмов в список любимых,
# чтобы позже прочитать рецензии на них.
# Напишите программу, в которой пользователь вводит фильм. Если он есть в перечне, то добавляется в список любимых.
# Если его нет, то выводится ошибка. В конце выведите весь список любимых фильмов.
#
# Пример:
# Сколько фильмов хотите добавить? 3
# Введите название фильма: Леон
# Введите название фильма: Безумный Макс
# Ошибка: фильма Безумный Макс у нас нет :(
# Введите название фильма: Мементо
# Ваш список любимых фильмов: Леон, Мементо

films = [
    "Крепкий орешек",
    "Назад в будущее",
    "Таксист",
    "Леон",
    "Богемская рапсодия",
    "Город грехов",
    "Мементо",
    "Отступники",
    "Деревня",
]

quan = int(input("How much movies do you want to add? "))
fav_mov = []

for i in range(quan):
    mov = input("Enter movie's name: ")
    if mov in fav_mov:
        print("This movie is already in your favorites list")
    elif mov in films:
        fav_mov.append(mov)
    else:
        print("This movie is not in our database")

str_fav_mov = ", ".join(fav_mov)

print(f"Your favorite movies list: {str_fav_mov}")

# СТРОКИ
# Задача 6. Файлы
# В одной IT-компании существует негласный закон об именовании текстовых документов:
# Название файла не должно начинаться на один из специальных символов: @№$%^&*().
# Файл заканчивается расширением .txt или .docx.
# Напишите программу, которая получает на вход полное название файла и проверяет его по этим правилам.
# Пример 1: Название файла: @example.txt
# Ошибка: название начинается на один из специальных символов.
# Пример 2: Название файла: example.ttx
# Ошибка: неверное расширение файла. Ожидалось .txt или .docx.
# Пример 3: Название файла: example.txt
# Файл назван верно.

file_name = input("Enter file name: ")

mark1 = "@№$%^&*() "
mark2 = [".txt", ".docx"]

if file_name[0] in mark1:
    print("Error: filename starts with one of the special characters")
elif file_name[-4:] not in mark2 and file_name[-5:] not in mark2:
    print("Error: wrong file extension. Expected .txt or .docx.")
else:
    print("File has named correctly")

# Задача 7. Сжатие
# С увеличением объёма данных возникла потребность в сжатии этих данных без потери важной информации.
# Для этого было придумано кодирование, которое осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2',
# то есть группы одинаковых символов исходной строки заменяются на этот символ и количество его повторений
# в этой позиции строки.
# Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и
# выводит закодированную последовательность на экран. Кодирование должно учитывать регистр символов.
#
# Пример:
# Введите строку: aaAAbbсaaaA
# Закодированная строка: a2A2b2с1a3A1

str_start = input("Enter string: ")

L = len(str_start)
str_res = str_start[0] + "1"
count = 1

for i in range(1, L):
    if str_start[i] == str_start[i - 1]:
        count += 1
        str_res = str_res[:-1] + str(count)
    else:
        count = 1
        str_res += str_start[i] + str(count)

print(str_res)


# Задача 8. IP-адрес
# При написании клиент-серверного приложения часто приходится работать с IP-адресами.
# IP-адрес состоит из четырёх целых чисел в диапазоне от 0 до 255, разделённых точками.
# Пользователь вводит строку. Напишите программу, которая определяет, является ли заданная строка правильным IP-адресом.
# Обеспечьте контроль ввода, где предусматривается ввод целых чисел от 0 до 255, а также точки между ними.
#
# Пример 1:
# Введите IP: 128.16.35.a4
# a4 — это не целое число.
#
# Пример 2:
# Введите IP: 240.127.56.340
# 340 превышает 255.
#
# Пример 3:
# Введите IP: 34.56.42,5
# Адрес — это четыре числа, разделённые точками.
#
# Пример 4:
# Введите IP: 128.0.0.255
# IP-адрес корректен.

# ip = input('Enter ip-address: ')
#
# ip_list = ip.split('.')
# res = ''
#
# if len(ip_list) != 4:
#     res = 'ip address is 4 integers separated by dots'
# else:
#     for i in ip_list:
#         if not i.isdigit():
#             res = f'{i} is not integer'
#         elif int(i) > 255:
#             res = f'{i} out of range'
#         else:
#             res = 'ip-address is correct'
#
# print(res)
