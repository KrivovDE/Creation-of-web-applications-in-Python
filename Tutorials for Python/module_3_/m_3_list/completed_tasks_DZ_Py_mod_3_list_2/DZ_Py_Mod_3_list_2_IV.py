# # Задача 1. Страшный код
# # Вашему другу, который тоже начал изучать Python, преподаватель дал такую задачу: есть три списка — основной и два побочных.
# # В основном лежат элементы [1, 5, 3], а в побочных — [1, 5, 1, 5] и [1, 3, 1, 5, 3, 3] соответственно.
# # Первый побочный закидывается в основной, там считается количество цифр 5, количество выводится на экран,
# # и затем они удаляются из основного списка. После этого в основной закидывается второй побочный список,
# # там считается количество цифр 3 и выводится на экран. В конце также выводится и сам список.
# # Из интереса вы попросили вашего друга показать код его программы и поняли, что сделали это не зря — то,
# # что вы увидели, повергло вас в шок и ужас. Вот сам код:
# # Используя знания о методах списков, а также о стиле программирования, помогите другу переписать программу.
# # Не используйте дополнительные списки.
# # Результат работы программы:
# # Кол-во цифр 5 при первом объединении: 3
# # Кол-во цифр 3 при втором объединении: 4
# # Итоговый список: [1, 3, 1, 1, 1, 3, 1, 5, 3, 3]
#
# a = [1, 5, 3]
# b = [1, 5, 1, 5]
# c = [1, 3, 1, 5, 3, 3]
#
# a.extend(b)
# num_5 = a.count(5)
# for i in range(num_5):
#     a.remove(5)
#     a.extend(c)
# num_3 = a.count(3)
# print('Всего цифр 5 в списке : ', num_5)
# print('Всего цифр 3 в списке : ', num_3)
# print('Итоговый список: ', a)
#
#
# # Задача 2. Шеренга
# # Два класса стоят в две отдельные шеренги. В каждом классе ученики выстроены по росту (по возрастанию):
# # в одном классе от 160 см до 176 см с шагом 2, во втором классе — от 162 см до 180 см с шагом 3.
# # Спустя какое-то время два класса объединяют в одну шеренгу и тоже выстраивают их по возрастанию.
# # Напишите программу, которая генерирует списки роста для каждого в классе, затем объединяет их в один список и сортирует
# # его в порядке возрастания. Выведите отсортированный список на экран.
#
# class_1 = list(range(160, 176, 2))
# class_2 = list(range(162, 180, 3))
# class_1.extend(class_2)
# for j in range(len(class_1) - 1):
#     for i in range(len(class_1) - 1):
#         if class_1[i] > class_1[i + 1]:
#             class_1[i], class_1[i + 1] = class_1[i + 1], class_1[i]
# print(class_1)
#
#
# # Задача 3. Детали
# # В базе данных магазина всякой всячины хранится список названий деталей и их стоимостей:
# # shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300], ['педаль', 100], ['седло', 1500], ['рама', 12000],
# #         ['обод', 2000], ['шатун', 200], ['седло', 2700]]
# # Продавец решил, что считать количество и стоимость деталей вручную не очень удобно, поэтому решил попросить
# # помощи у программиста, чтобы оптимизировать этот процесс.
# # Напишите программу, которая запрашивает у пользователя деталь, считает их количество, а также общую стоимость.
#
# shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300], ['педаль', 100], ['седло', 1500], ['рама', 12000], ['обод', 2000], ['шатун', 200], ['седло', 2700]]
#
# detail = input('ведите название детали: ')
# detail_col = 0
# detail_cost = 0
#
# for i in range(len(shop)):
#     if shop[i][0] == detail.lower():
#         detail_col += 1
#         detail_cost += shop[i][1]
# print()
# if detail_col > 0:
#     print(f"Количество деталей:  {detail_col}\nОбщая стоимость:  {detail_cost}")
# else:
#     print("Товара не существует")
#

# Задача 4. Симметричная последовательность
# Последовательность чисел называется симметричной, если она одинаково читается как слева направо, так и справа налево.
# Например, следующие последовательности являются симметричными:
# Пользователь вводит последовательность из N чисел. Напишите программу, которая определяет,
# какое минимальное количество и каких чисел надо приписать в конец этой последовательности, чтобы она стала симметричной.

number = int(input('Кол-во чисел: '))
mas = []
for i in range(number):
    mas.append(int(input('Число: ')))
counter = 0
while mas != mas[::-1]:
    mas.insert(number, mas[counter])
    counter += 1
print('Нужно приписать чисел:', counter)
print('Сами числа:', mas[:counter][::-1])



# Задача 5. Кино
# Илья зашёл на любительский киносайт, на котором пользователи оставляют рецензии на фильмы. Их список:
# films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’, ‘Богемская рапсодия’, ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить часть фильмов в список любимых,
# чтобы позже прочитать рецензии на них.Напишите программу, в которой пользователь вводит фильм.
# Если он есть в перечне, то добавляется в список любимых. Если его нет, то выводится ошибка. В конце выведите весь список любимых фильмов.

i = int(input("Сколько фильмов хотите добавить: "))
films = ['Крепкий орешек', 'Назад в будущее', 'Таксист', 'Леон', 'Богемская рапсодия', 'Город грехов', 'Мементо', 'Отступники', 'Деревня']
likes = []
while i > 0:
    film = input("Введите название фильма: ")
    if film not in films:
        print("Такого фильма нет в списке")
        continue
    likes.append(film)
    i -= 1

print("Список фильмов: ", likes)


# СТРОКИ
# Задача 6. Файлы
# В одной IT-компании существует негласный закон об именовании текстовых документов:
# 1.	Название файла не должно начинаться на один из специальных символов: @№$%^&*().
# 2.	Файл заканчивается расширением .txt или .docx.
# Напишите программу, которая получает на вход полное название файла и проверяет его по этим правилам.
# Пример 1: Название файла: @example.txt
# Ошибка: название начинается на один из специальных символов.
#  Пример 2: Название файла: example.ttx
# Ошибка: неверное расширение файла. Ожидалось .txt или .docx.
#  Пример 3: Название файла: example.txt
# Файл назван верно.

# file = input('Название файла: ')
# if file.startswith(('@', '№', '$', '%', '^', '&', '*', '(', ')')):
#     print('Ошибка: название начинается на один из специальных символов')
# elif not file.endswith(('.txt', '.docx')):
#     print('Ошибка: неверное расширение файла. Ожидалось .txt или .docx')
# else:
#     print('Файл назван верно.')


# Задача
# 7.
# С увеличением объёма данных возникла потребность в сжатии этих данных без потери важной информации.
# Для этого было придумано кодирование, которое осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2',то есть группы одинаковых символов исходной строки заменяются на этот символ
# и количество его повторений в этой позиции строки. Напишите программу, которая считывает строку,
# кодирует её предложенным алгоритмом и выводит закодированную последовательность на экран. Кодирование должно учитывать регистр символов.


s = input("Введите текст для кодировки: ")
s = 'aaaabbсaa'
s_encoding = ""
n = 1
for i in range(len(s)-1):
    if s[i] == s[i+1]:
        n += 1
    if s[i] != s[i+1] or i == len(s)-2:
        s_encoding += s[i] + str(n)
        n = 1
if s[-2] != s[-1]:
    s_encoding += s[-1] + '1'
print(s_encoding)



# Задача 8. IP-адрес
# При написании клиент-серверного приложения часто приходится работать с IP-адресами. IP-адрес состоит из четырёх
# целых чисел в диапазоне от 0 до 255, разделённых точками. Пользователь вводит строку. Напишите программу,
# которая определяет, является ли заданная строка правильным IP-адресом. Обеспечьте контроль ввода, где предусматривается
# ввод целых чисел от 0 до 255, а также точки между ними.

# ip = input('Введите IP: ').split('.')
# if len(ip) < 4:
#     print('Адрес - это четыре числа, разделённые точками!')
# else:
#     num = 0
#     out = 0
#     for i in ip:
#         if i.isdigit():
#             num += 1
#             if int(i) > 255:
#                 out += 1
#                 print(i, 'превышает 255')
#         else:
#             print(i, '- не целое число')
#     if out == 0 and num == 4:
#         print('IP-адрес корректен')
