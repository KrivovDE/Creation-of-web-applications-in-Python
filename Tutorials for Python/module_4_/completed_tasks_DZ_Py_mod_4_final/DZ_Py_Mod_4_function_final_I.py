from functools import reduce
# =============================================================================
# =============================================================================

# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 1 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию matrix(), которая создает, заполняет и возвращает матрицу|
# | заданного размера. При этом (в зависимости от переданных аргументов)      |
# | она должна вести себя так:                                                |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

def matrix(v1=None, v2=None, arg=0):
    if v1 is None and v2 is None:
        v1 = 1
        v2 = 1
    elif v2 is None:
        v2 = v1
    return [[arg for _ in range(v2)] for _ in range(v1)]
#
#
# print(matrix())               # матрица 1 × 1 из 0
# print(matrix(2, 5))           # матрица 2 × 5 из 0
# print(matrix(3, 4, 9))        # матрица 3 × 4 из 9


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 2 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию count_args(), которая принимает произвольное количество  |
# | аргументов и возвращает количество переданных в нее аргументов.           |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def count_args(*args):
#     return len(args)
#
#
# print(count_args())
# print(count_args('stepik', 'beegeek'))
# print(count_args([], (''), 'a', 12, False))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 3 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию sq_sum(), которая принимает произвольное количество      |
# | числовых аргументов и возвращает сумму их квадратов.                      |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def sq_sum(*args):
#     rslt = 0
#     for arg in args:
#         rslt += arg**2
#     return rslt
#
#
# print(sq_sum())
# print(sq_sum(1, 2, 3))
# print(sq_sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 4 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию greet(), которая принимает произвольное количество       |
# | аргументов строк имен (как минимум одно) и возвращает приветствие         |
# | в соответствии с образцом.                                                |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def greet(*args):
#     and_name = ' and '.join(() + args)
#     rslt = f'Hello, {and_name}!'
#     return rslt
#
#
# print(greet('Timur'))
# print(greet('Timur', 'Roman'))
# print(greet('Timur', 'Roman', 'Ruslan'))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 5 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию info_kwargs(), которая принимает произвольное количество |
# | именованных аргументов и печатает именованные аргументы в соответствии с  |
# | образцом: <имя аргумента>: <значение аргумента>, при этом имена аргументов|
# | следуют в алфавитном порядке (по возрастанию).                            |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def info_kwargs(**kwargs):
#     sort_kwargs = sorted(kwargs.items())
#     for key, value in sort_kwargs:
#         print(f'{key}: {value}')
#
# info_kwargs(first_name='Timur', last_name='Guev', age=28, job='teacher')


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 6 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# athletes = [
#     ['Дима', 10, 130, 35],
#     ['Тимур', 11, 135, 39],
#     ['Руслан', 9, 140, 33],
#     ['Рустам', 10, 128, 30],
#     ['Амир', 16, 170, 70],
#     ['Рома', 16, 188, 100],
#     ['Матвей', 17, 168, 68],
#     ['Петя', 15, 190, 90]
# ]
#
# def sort_athlets(lst):
#     choice = int(input('Сортировка:\n1: по имени;\n2: по возрасту;\n'
#                        '3: по росту;\n4: по весу;\n--> ')) - 1
#     rslt = sorted(lst, key=lambda lst: lst[choice])
#     for i in range(len(rslt)):
#         print(*rslt[i], end='\n')
#
#
# sort_athlets(athletes)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 7 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите программу, которая с помощью функций filter() и map() отбирает   |
# | из заданного списка numbers трёхзначные числа, дающие при делении на 55   |
# | остаток 22, и выводит их кубы, каждый в отдельной строке.                 |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item))
#     return result
#
#
# def filter(function, items):
#     result = []
#     for item in items:
#         if function(item):
#             result.append(item)
#     return result
#
#
# numbers = [
#     1014, 1321, 675, 1215, 56, 1386, 1385, 431, 1058, 486, 1434, 696,
#     1016, 1084, 424, 1189, 475, 95, 1434, 1462, 815, 776, 657, 1225,
#     912, 537, 1478, 1176, 544, 488, 668, 944, 207, 266, 1309, 1027,
#     257, 1374, 1289, 1155, 230, 866, 708, 144, 1434, 1163, 345, 394,
#     560, 338, 232, 182, 1438, 1127, 928, 1309, 98, 530, 1013, 898, 669,
#     105, 130, 1363, 947, 72, 1278, 166, 904, 349, 831, 1207, 1496, 370,
#     725, 926, 175, 959, 1282, 336, 1268, 351, 1439, 186, 273, 1008, 231,
#     138, 142, 433, 456, 1268, 1018, 1274, 387, 120, 340, 963, 832, 1127
# ]
#
# def sort_num(num):
#     rslt = num % 5 == 2 and len(str(num)) == 3
#     return rslt
#
# def coub(num):
#     return num**3
#
#
# map(print, map(coub, filter(sort_num, numbers)))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 8 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Требовалось написать программу, которая:                                  |
# | преобразует список floats в список чисел, возведенных в квадрат и         |
# | округленных с точностью до одного десятичного знака;                      |
# | фильтрует список words  и оставляет только палиндромы                     |
# | длиной более 44 символов; находит произведение чисел из списка numbers.   |
# | Программист торопился и написал программу неправильно.                    |
# | Доработайте его программу.                                                |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# floats = [4.35, 6.09, 3.25, 9.77, 2.16, 8.88, 4.59, 34.23, 12.12, 4.67, 2.45, 9.32]
# words = ['racecar', 'akinremi', 'deed', 'temidayo', 'omoseun', 'civic',
#          'TATTARRATTAT', 'malayalam', 'nun']
#
# numbers = [4, 6, 9, 23, 5]
#
# # Исправьте этот код
# map_result = list(map(lambda num: round(num, 1), floats))
# filter_result = list(filter(lambda name: name == name[::-1] and len(name) > 4, words))
# reduce_result = reduce(lambda num1, num2: num1*num2, numbers)
#
# print(map_result)
# print(filter_result)
# print(reduce_result)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 9 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите программу, которая с помощью встроенных функций filter(), map(), |
# | sorted() и reduce() выводит в алфавитном порядке список primary городов   |
# | с населением более 1000000010000000 человек, в формате:                   |
# | Cities: Beijing, Buenos Aires, ...                                        |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# data = [
#     ['Tokyo', 35676000, 'primary'],
#     ['New York', 19354922, 'nan'],
#     ['Mexico City', 19028000, 'primary'],
#     ['Mumbai', 18978000, 'admin'],
#     ['Sao Paulo', 18845000, 'admin'],
#     ['Delhi', 15926000, 'admin'],
#     ['Shanghai', 14987000, 'admin'],
#     ['Kolkata', 14787000, 'admin'],
#     ['Los Angeles', 12815475, 'nan'],
#     ['Dhaka', 12797394, 'primary'],
#     ['Buenos Aires', 12795000, 'primary'],
#     ['Karachi', 12130000, 'admin'],
#     ['Cairo', 11893000, 'primary'],
#     ['Rio de Janeiro', 11748000, 'admin'],
#     ['Osaka', 11294000, 'admin'],
#     ['Beijing', 11106000, 'primary'],
#     ['Manila', 11100000, 'primary'],
#     ['Moscow', 10452000, 'primary'],
#     ['Istanbul', 10061000, 'admin'],
#     ['Paris', 9904000, 'primary']
# ]
#
# lst_city = filter(lambda city: city if 'primary' in city
#                                        and city[1] > 10000000 else False, data)
#
# sorted_city = sorted(map(lambda city: city[0], lst_city))
# rslt = reduce(lambda city_1, city_2: city_1 + ", " + city_2, sorted_city)
#
# print(f'Cities: {rslt}')


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{TASK 10}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию is_non_negative_num, используя синтаксис анонимных       |
# | функций, которая принимает строковый аргумент и возвращает значение True, |
# | если переданный аргумент является неотрицательным числом                  |
# | (целым или вещественным) и False в противном случае.                      |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# is_non_negative_num = lambda num: set(num.replace('.', '', 1)) <= set('0123456789')
#
# print(is_non_negative_num('10.34ab'))
# print(is_non_negative_num('10.45'))
# print(is_non_negative_num('-18'))
# print(is_non_negative_num('-34.67'))
# print(is_non_negative_num('987'))
# print(is_non_negative_num('abcd'))
# print(is_non_negative_num('123.122.12'))
# print(is_non_negative_num('123.122'))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{TASK 11}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Используя параллельную итерацию сразу по трем спискам countries,          |
# | capitals и population выведите информацию о стране в формате:             |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# countries = ['Russia', 'USA', 'UK', 'Germany', 'France', 'India']
# capitals = ['Moscow', 'Washington', 'London', 'Berlin', 'Paris', 'Delhi']
# population = [145_934_462, 331_002_651, 80_345_321,
#               67_886_011, 65_273_511, 1_380_004_385]
#
#
# def print_text(*args):
#     for country, capital, population in zip(*args):
#         print(f'{capital} is the capital of {country}, '
#               f'population equal {population} people.', end='\n\n')
#
#
# print_text(countries, capitals, population)
