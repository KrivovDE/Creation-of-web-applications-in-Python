# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 1 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию, которая отображает пустой или заполненный квадрат из    |
# | некоторого символа. Функция принимает в качестве параметров:              |
# |  длину стороны квадрата, символ и переменную логического типа:            |
# | ■ если она равна True, квадрат заполненный;                               |
# | ■ если False, квадрат пустой.                                             |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/


def qudrt(len_side, symbol, full):
    if full:
        for i in range(len_side):
            for j in range(len_side):
                print(symbol, end="\t")
            print("")
    else:
        for i in range(len_side):
            for j in range(len_side):
                if i == 0 or j == 0 or i == len_side - 1 or j == len_side - 1:
                    print(symbol, end="\t")
                else:
                    print(" ", end="\t")
            print("")


qudrt(4, "}{", False)
qudrt(4, "[x]", True)
qudrt(90, "[x]", True)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 2 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию, которая возвращает произведение чисел в указанном       |
# | диапазоне. Границы диапазона передаются в качестве параметров.            |
# | Если границы диапазона перепутаны                                         |
# | например:                                                                 |
# | 5 — верхняя граница                                                       |
# | 25 — нижняя граница,                                                      |
# | их нужно поменять местами.                                                |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def range_mlt(n1, n2):
#     rslt = 1
#     if n2 < n1:
#         n1, n2 = n2, n1
#     for i in range(n1, n2+1):
#         rslt *= i
#     return rslt
#
#
# print(range_mlt(5, 2))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 3 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию, которая считает количество цифр в числе.                |
# | Число передаётся в качестве параметра.                                    |
# | Из функции нужно вернуть полученное количество цифр.                      |
# | Например, если передали 3456, количество цифр будет 4.                    |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def cnt_digs(num):
#     return len(str(num))
#
#
# print(cnt_digs(3456))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 4 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию, которая проверяет является ли число палиндромом.        |
# | Число передаётся в качестве параметра. Если число палиндром нужно         |
# | вернуть из функции true, иначе false. «Палиндром» — это число, у          |
# | которого первая часть цифр равна второй перевернутой части цифр.          |
# | Например, 123321 — палиндром (первая часть 123, вторая 321,               |
# | которая после переворота становится 123),                                 |
# | 546645 — палиндром, а 421987 — не палиндром.                              |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def is_palindrome(num):
#     return str(num) == str(num)[::-1]
#
# print(is_palindrome(12321))
# print(is_palindrome(1213221))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 5 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите функцию, которая отображает горизонтальную или вертикальную      |
# | линию из некоторого символа. Функция принимает в качестве параметра:      |
# | длину линии, направление, символ.                                         |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def line_print(len_line, vector, symbol):
#     if vector:
#         print(len_line * symbol)
#     else:
#         for _ in range(len_line):
#             print(symbol)
#
#
# line_print(12, True, '-')
# line_print(12, False, '|')
