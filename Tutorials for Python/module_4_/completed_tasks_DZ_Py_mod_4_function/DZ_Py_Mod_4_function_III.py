# Задание 1
# Напишите функцию, которая отображает пустой или заполненный квадрат из
# некоторого символа. Функция принимает в качестве параметров: длину стороны
# квадрата, символ и переменную логического типа:
# ■ если она равна True, квадрат заполненный;
# ■ если False, квадрат пустой.

def sqr_symbol(lng: int, sym: str, bools: bool):
    for i in range(lng):
        if (not bools) and i % (lng - 1) != 0:
            print(sym + ' ' * (lng - 2) + sym)
        else:
            print(sym * lng)


sqr_symbol(5, '-', False)

# Задание 2
# Напишите функцию,которая возвращает произведение чисел в указанном диапазоне.
# Границы диапазона передаются в качестве параметров. Если границы диапазона
# перепутаны (например, 5 — верхняя граница, 25 — нижняя граница), их нужно
# поменять местами.
import math


def multiply(num1: int, num2: int):
    if num1 > num2:
        num1, num2 = num2, num1
    return math.prod([i for i in range(num1, num2 + 1)])


print(multiply(4, 1))

# Задание 3
# Напишите функцию, которая считает количество цифр в числе. Число передаётся
# в качестве параметра. Из функции нужно вернуть полученное количество цифр.
# Например, если передали 3456, количество цифр будет 4.

# def quantity_digit(num: int):
#     return len(str(num))
#
#
# print(quantity_digit(54321))


# Задание 4
# Напишите функцию, которая проверяет является ли число палиндромом. Число
# передаётся в качестве параметра. Если число палиндром нужно вернуть из
# функции true, иначе false. «Палиндром» — это число, у которого первая часть
# цифр равна второй перевернутой части цифр. Например, 123321 — палиндром
# (первая часть 123, вторая 321, которая после переворота становится 123),
# 546645 — палиндром, а 421987 — не палиндром.

# def pal_number(num: int):
#     num = str(num)
#     return num[0:len(num) // 2] == num[:len(num)//2-1:-1]
#
#
# print(pal_number(12343321))

# Задание 5
# Напишите функцию, которая отображает горизонтальную или вертикальную линию
# из некоторого символа. Функция принимает в качестве параметра: длину линии,
# направление, символ.

# #
def line_symbol(lng: int, line: str, sym: str):
    if line == 'hr':                    #hr горизонтальное направление
        print(*[sym for i in range(lng)], sep='')
    elif line == 'vr':                  #vr вертикальное направление
        print(*[sym for i in range(lng)], sep='\n')
    else:
        print('Проверьте корректность данных')


line_symbol(6, 'vr', '*')
