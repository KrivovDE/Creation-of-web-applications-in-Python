from string import ascii_lowercase
# =============================================================================
# =============================================================================


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 1 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Вводится четырехзначное целое положительное число.                        |
# | Подумайте, как можно определить итератор для перебора его цифр.           |
# | Выведите цифры этого введенного числа (с помощью итератора)               |
# | в одну строчку через пробел.                                              |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# num = input('Введите число:\n--> ')
# print(*list(iter(num)))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 2 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Вводится целое положительное число a. Необходимо определить генератор,    |
# | который бы возвращал модули чисел в диапазоне [-a; a], а затем еще один,  |
# | который бы вычислял кубы чисел (возведение в степень 3), возвращаемых     |
# | первым генератором. Вывести в одну строчку через пробел первые четыре     |
# | значения. (Полагается, что генератор выдает, как минимум четыре значения).|
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# a = int(input('Введите число:\n--> '))
#
# gen_abs = (abs(num) for num in range(-a, a+1))
# gen_cube = (num**3 for num in gen_abs)
#
# print(*list(gen_cube)[:4])


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 3 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Используя символы малых букв латинского алфавита (строка ascii_lowercase):|
# | Запишите генератор, который бы возвращал все сочетания из двух букв       |
# | латинского алфавита.                                                      |
# | Выведите первые 50 сочетаний на экран в строку через пробел.              |
# | Например, первые семь начальных сочетаний имеют вид:                      |
# | aa ab ac ad ae af ag                                                      |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# g_1 = (i+j for i in ascii_lowercase for j in ascii_lowercase)
#
# print(*list(g_1)[:50])


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 4 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | На вход программы поступает строка с названиями пунктов меню,             |
# | записанные в одну строчку через пробел. Необходимо задать функцию с       |
# | именем get_menu, которая преобразует эту строку в список из слов и        |
# | возвращает этот список. Сигнатура функции, следующая - def get_menu(s):   |
# | Определите декоратор для этой функции с именем show_menu,                 |
# | который отображает список на экран в формате:                             |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# menu_str = input('--> ')
# # Главная Добавить Удалить Выйти
#
#
# def show_menu(func):
#     def wrapper(*args, **kwargs):
#         rslt = func(*args, **kwargs)
#         for i in range(len(rslt)):
#             print(f'{i+1}.', rslt[i], end='\n')
#
#     return wrapper
#
#
# @show_menu
# def get_menu(menu):
#     menu_lst = menu.split()
#
#     return menu_lst
#
#
# get_menu(menu_str)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 5 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Вводятся две строки из слов (слова записаны через пробел).                |
# | Объявите функцию, которая преобразовывает эти две строки                  |
# | в два списка слов и возвращает эти списки.                                |
# | Определите декоратор для этой функции, который попарно объединяет         |
# | эти списки. Полученный список - должен возвращаться при вызове декоратора.|
# | Примените декоратор к первой функции и вызовите ее для введенных строк.   |
# | Результат отобразите на экране.                                           |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# s1 = 'house river tree car'
# s2 = 'дом река дерево машина'
# # s3 = 'тест тест тест тест'
#
# def show_lst(func):
#     def wrapper(*args, **kwargs):
#         wrap_func = func(*args, **kwargs)
#         rslt = (list(zip(*wrap_func)))
#         print(rslt)
#
#     return wrapper
#
#
# @show_lst
# def get_lst(*args):
#     for i in args:
#         yield i.split()
#
#
# get_lst(s1, s2)