# Подвиг 1.
# Вводится четырехзначное целое положительное число. Подумайте,
# как можно определить итератор для перебора его цифр. Выведите цифры
# этого введенного числа (с помощью итератора) в одну строчку через пробел.
# Sample Input:  4387
# Sample Output:  4 3 8 7

# num = int(input("Введите число: "))
# gen = (i for i in str(num))
# for i in str(num):
#     print(next(gen), end=' ')

# Подвиг 2.
#  Вводится целое положительное число a. Необходимо определить генератор,
# который бы возвращал модули чисел в диапазоне [-a; a], а затем еще один,
# который бы вычислял кубы чисел (возведение в степень 3), возвращаемых первым
# генератором.
# Вывести в одну строчку через пробел первые четыре значения.
# (Полагается, что генератор выдает, как минимум четыре значения).
# Sample Input:
# 3
# Sample Output:
# 27 8 1 0

# a = int(input("Введите число: "))
# gen1 = (abs(i) for i in range(-a, a+1))
# gen2 = (next(gen1)**3 for i in range(-a, a+1))
# for i in range(4):
#     print(next(gen2), end=' ')

# Подвиг 3.
# Используя символы малых букв латинского алфавита (строка ascii_lowercase):
# from string import ascii_lowercase
# запишите генератор, который бы возвращал все сочетания из двух букв
# латинского алфавита. Выведите первые 50 сочетаний на экран в строку через
# пробел.
# Например, первые семь начальных сочетаний имеют вид: aa ab ac ad ae af ag

# from string import ascii_lowercase
# gen = (i+j for i in ascii_lowercase for j in ascii_lowercase)
# for i in range(50):
#     print(next(gen), end=' ')

# Подвиг 4.
# На вход программы поступает строка с названиями пунктов меню, записанные
# в одну строчку через пробел. Необходимо задать функцию с именем get_menu,
# которая преобразует эту строку в список из слов и возвращает этот список.
# Сигнатура функции, следующая - def get_menu(s): ... Определите декоратор
# для этой функции с именем show_menu, который отображает список на экран в
# формате:
# Sample Input:	Главная Добавить Удалить Выйти
# Sample Output:
# 1. Главная
# 2. Добавить
# 3. Удалить
# 4. Выйти

# def defshow_men(func):
#     def wrapper(*args, **kwargs):
#         a = func(*args, **kwargs)
#         print(*[f'{i+1}. {a[i]}' for i in range(len(a))], sep='\n')
#     return wrapper
#
#
# @defshow_men
# def get_menu(s: str) -> list:
#     return s.split(' ')
#
#
# get_menu('Главная Добавить Удалить Выйти')

# Подвиг 5.
# Вводятся две строки из слов (слова записаны через пробел). Объявите
# функцию, которая преобразовывает эти две строки в два списка слов и
# возвращает эти списки.
# Определите декоратор для этой функции, который попарно объединяет эти
# списки. Полученный список - должен возвращаться при вызове декоратора.
# Примените декоратор к первой функции и вызовите ее для введенных строк.
# Результат отобразите на экране.
# Sample Input:
# house river tree car
# дом река дерево машина
# Sample Output:
#
# [('house', 'дом'), ('river', 'река'), ('tree', 'дерево'), ('car', 'машина')]


# def dec_together(func):
#     def wrapper(*args, **kwargs):
#         return [item for item in zip(*[x for x in func(*args, **kwargs)])]
#     return wrapper
#
#
# @dec_together
# def str_to_list(*args: str) -> list:
#     return list(map(lambda a: a.split(' '), args))
#
#
# print(str_to_list('house river tree car', 'дом река дерево машина'))

