# =============================================================================
# =============================================================================


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 1 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Написать рекурсивную функцию нахождения степени числа.                    |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def num_exp(num, exp):
#     if exp == 1:
#         return (num)
#     if exp != 1:
#         return (num * num_exp(num, exp - 1))
#
#
# num = int(input('Введите число: '))
# exp = int(input('Введите его степень: '))
# print(f'Ответ: {num_exp(num, exp)}')


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 2 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Написать рекурсивную функцию, которая вычисляет сумму всех чисел          |
# | в диапазоне от a до b. Пользователь вводит a и b.                         |
# | Проиллюстрируйте работу функции примером.                                 |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def num_sum(a, b):
#     if a == b:
#         return b
#     return a + num_sum(a+1, b)
#
#
# a = int(input('Введите 1-е число: '))
# b = int(input('Введите 2-е число: '))
# print(f'Ответ: {num_sum(a, b)}')


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 3 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Написать рекурсивную функцию, которая выводит N звезд в ряд,              |
# | число N задает пользователь. Проиллюстрируйте работу функции примером.    |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def star_fall(n):
#     if n == 0:
#         return True
#     print('*', end='')
#     return star_fall(n-1)
#
#
# num = int(input('Введите число звезд: '))
# star_fall(num)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 4 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите рекурсивную функцию, которая принимает список из 100 целых чисел,|
# | полученных случайным образом, и находит позицию, с которой начинается     |
# | последовательность из 10 чисел, сумма которых минимальна.                 |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def IndMinRec(lst, v1=0, v2=90):
#     if len(lst) == 10:
#         return v2, sum(lst)
#     sum1 = sum(lst[v1:10])
#     v2, sum2 = IndMinRec(lst[v1+1:])
#     if sum1 <= sum2:
#         v2 = 100 - len(lst[v1:])
#         return v2, sum1
#     else:
#         return v2, sum2
#
#
# lst = [randint(-100, 100) for i in range(100)]
# print(*lst)
# print(f'Позиция: {IndMinRec(lst)[0]}\n'
#       f'Наименьшая сумма {IndMinRec(lst)[1]}')


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 5 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Написать функцию, которая принимает две даты                              |
# | (т.е. функция принимает шесть параметров) и вычисляет разность в днях     |
# | между этими датами. Для решения этой задачи необходимо также написать     |
# | функцию, которая определяет, является ли год високосным.                  |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# def leap_y(year):
#     return (year % 400 == 0) or (year % 100 != 0) and (year % 4 == 0)
#
#
# def days_cnt(d, m, y, lst):
#     cnt = d
#     cnt += sum(lst[:m - 1])
#     if leap_y(y) and m > 2:
#         cnt += 1
#     return cnt
#
#
# def dif_date(d1, m1, y1, d2, m2, y2):
#     mm = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
#     res = 0
#     if y2 > y1:
#         for i in range(y1 + 1, y2):
#             res += 366 if leap_y(i) else 365
#     if y2 - y1 == 1:
#         res += 365 - days_cnt(d1, m1, y1, mm) + days_cnt(d2, m2, y2, mm)
#     elif y2 == y1:
#         res += days_cnt(d2, m2, y2, mm) - days_cnt(d1, m1, y1, mm)
#     return res
#
#
# print(f'{dif_date(5, 8, 2002, 1, 2, 2003)} дней')
