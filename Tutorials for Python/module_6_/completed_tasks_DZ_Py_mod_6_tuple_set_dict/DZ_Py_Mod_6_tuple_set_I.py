from re import sub
from typing import Tuple, List, Set

# =============================================================================
# =============================================================================

# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 1 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Дополните приведенный код, используя срезы, чтобы он вывел все элементы   |
# | кортежа countries, кроме двух последних и трех первых.                    |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# countries: Tuple[str, ...] = (
#     'Russia',
#     'Argentina',
#     'Slovakia',
#     'Canada',
#     'Slovenia',
#     'Italy',
#     'Spain',
#     'Ukraine',
#     'Chile',
#     'Cameroon'
# )
#
# res: Tuple[str, ...] = countries[3:len(countries)-2]
#
# print(res)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 2 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Дополните приведенный код, используя операторы конкатенации (+) и         |
# | умножения кортежа на число (*), чтобы он вывел кортеж:                    |
# | (1, 2, 3, 1, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13).   |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# numbers1: Tuple[int, ...] = (1, 2, 3)
# numbers2: Tuple[int, ...] = (6,)
# numbers3: Tuple[int, ...] = (7, 8, 9, 10, 11, 12, 13)
#
# res: Tuple[int, ...] = tuple(numbers1*2 + numbers2*9 + numbers3)
#
# print(res)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 3 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Дополните приведенный код, так чтобы получить список, содержащий только   |
# | непустые кортежи исходного списка tuples, не меняя порядка их следования. |
# | Подсказки:                                                                |
# | Для проверки пустоты кортежа используйте встроенную функцию len().        |
# | Используйте списочное выражение.                                          |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# tuples: List[Tuple[any, ...]] = [(), (), ('',), ('a', 'b'), (),
#                     ('a', 'b', 'c'), (1,), (), (), ('d',), ('', ''), ()]
#
# non_empty_tuples: Tuple[any, ...] = tuple(filter(lambda tpl: len(tpl) > 0, tuples))
#
# print(non_empty_tuples)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 4 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Дополните приведенный код так, чтобы переменная new_tuples, содержала     |
# | список кортежей на основе списка tuples с последним элементом каждого     |
# | кортежа, замененным на численное значение 100                             |
# | Подсказки:                                                                |
# | Используйте списочное выражение. Чтобы получить все элементы кортежа t    |
# | кроме последнего, используем срез. Чтобы создать кортеж,                  |
# | содержащий единственный элемент 100, мы используем (100,).                |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# tuples: List[Tuple[int, ...]] = [(10, 20, 40), (40, 50, 60), (70, 80, 90),
#         (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
#
# new_tuples: List[Tuple[int, ...]] = [i[:-1] + (100,) for i in tuples]
#
# print(new_tuples)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 5 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Дополните приведенный код так, чтобы он вывел список, содержащий средние  |
# | арифметические значения чисел каждого вложенного кортежа в заданном       |
# | кортеже кортежей numbers.                                                 |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# numbers: Tuple[Tuple[int, ...], ...] = ((10, 10, 10, 12), (30, 45, 56, 45),
# (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))
# res: List[float, ...] = [sum(i)/2 for i in numbers]
#
# print(res)


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 6 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | На вход программе подается строка текста. Напишите программу, которая     |
# | определяет количество различных символов в строке.                        |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# print(len(set(input('--> '))))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 7 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | На вход программе подаются две строки, состоящие из цифр.                 |
# | Необходимо определить, верно ли, что в записи этих двух строк             |
# | используются все десять цифр?                                             |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# num1: str = input('num1 --> ')
# num2: str = input('num2 --> ')
# new_set: Set[str] = set(num1+num2)
#
# if len(new_set) == 10:
#   print('YES')
# else:
#   print('NO')


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 8 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Напишите программу для определения общего количества различных слов       |
# | в строке текста.                                                          |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# tmp: str = r'[.,;:-?-!]'
# text: str = sub(tmp, '', input('--> ').lower())
# words_list: List[str] = text.split()
#
# print(len(set(words_list)))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{ TASK 9 }~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | На вход программе подаются две строки текста, содержащие числа.           |
# | Напишите программу, которая выводит все числа в порядке возрастания,      |
# | которые есть как в первой строке, так и во второй.                        |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# num_1: any = map(int, input('--> ').split())
# num_2: any = map(int, input('--> ').split())
#
# set_1: Set[int] = set(num_1)
# set_2: Set[int] = set(num_2)
#
# print(*(set_1 & set_2))


# /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\========/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
# |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{TASK  10}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
# | Используя генератор множеств, дополните приведенный код так,              |
# | чтобы получить множество, содержащее уникальные слова (в нижнем регистре) |
# | строки sentence.                                                          |
# | Результат вывести на одной строке в алфавитном порядке, разделяя          |
# | элементы одним символом пробела.                                          |
# \~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/========\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/

# sentence = '''My very photogenic mother died in a freak accident
# (picnic, lightning) when I was three, and, save for a pocket of warmth in
# the darkest past, nothing of her subsists within the hollows and dells of
# memory, over which, if you can still stand my style
# (I am writing under observation), the sun of my infancy had set: surely,
# you all know those redolent remnants of day suspended, with the midges,
# about some hedge in bloom or suddenly entered and traversed by the rambler,
# at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''
#
# tmp: str = r'[();:,.]'
# text: str = sub(tmp, '', sentence)
# list_text: List[str] = text.lower().split()
# sort_text: List[str] = sorted(set(list_text))
#
# print(*sort_text)
