from typing import Tuple

# ЗАДАНИЕ 1 Основы работы с кортежами
# Дополните приведенный код, используя срезы, чтобы он вывел все элементы
# кортежа countries, кроме двух последних и трех первых.

# countries: Tuple[str, ...] = ('Russia', 'Argentina', 'Slovakia', 'Canada',
#                               'Slovenia', 'Italy', 'Spain', 'Ukraine',
#                               'Chile', 'Cameroon')
#
#
# def slice1(tpl: Tuple[str, ...]) -> Tuple[str, ...]:
#     return tpl[3:-2]
#
#
# print(slice1(countries))

# ЗАДАНИЕ 2 Основы работы с кортежами
# numbers1 = (1, 2, 3)
# numbers2 = (6,)
# numbers3 = (7, 8, 9, 10, 11, 12, 13)
#
# Дополните приведенный код, используя операторы конкатенации (+) и
# умножения кортежа на число (*), чтобы он вывел кортеж:
#
#  (1, 2, 3, 1, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13).

# numbers1: Tuple[int, ...] = (1, 2, 3)
# numbers2: Tuple[int, ...] = (6,)
# numbers3: Tuple[int, ...] = (7, 8, 9, 10, 11, 12, 13)
#
#
# def multiplier(num1: Tuple[int, ...], num2: Tuple[int, ...],
#                num3: Tuple[int, ...], ) -> Tuple[int, ...]:
#     return (num1 * 2) + (num2 * 9) + num3
#
#
# print(multiplier(numbers1, numbers2, numbers3))

# ЗАДАНИЕ 3 Основы работы с кортежами
# tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (),
# ('d',), ('', ''), ()]
# non_empty_tuples =
#
# print(non_empty_tuples)
#
# Дополните приведенный код, так чтобы получить список, содержащий только
# непустые кортежи исходного списка tuples, не меняя порядка их следования.
# Подсказки:
# Для проверки пустоты кортежа используйте встроенную функцию len().
# Используйте списочное выражение.

# tuples: list = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (),
#                 ('d',), ('', ''), ()]
# non_empty_tuples: list = [i for i in tuples if len(i) > 0]
# print(non_empty_tuples)


# ЗАДАНИЕ 4 Основы работы с кортежами
# tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90),
#           (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
# new_tuples =
# print(new_tuples)
#
# Дополните приведенный код так, чтобы переменная new_tuples, содержала
# список кортежей на основе списка tuples с последним элементом каждого
# кортежа, замененным на численное значение 100
# Подсказки:
# Используйте списочное выражение. Чтобы получить все элементы кортежа t
# кроме последнего, используем срез. Чтобы создать кортеж, содержащий
# единственный элемент 100, мы используем (100,).


# tuples: list = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90),
#                 (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
# new_tuples: list = [tuple(list(i)[:len(i)-1]) + (100,) for i in tuples]
# print(new_tuples)

# ЗАДАНИЕ 5
# Дополните приведенный код так, чтобы он вывел список, содержащий
# средние арифметические значения чисел каждого вложенного кортежа в
# заданном кортеже кортежей numbers.
# numbers = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32),
# (1, 2, 3, 4), (90, 10))

# numbers: Tuple[tuple, ...] = ((10, 10, 10, 12), (30, 45, 56, 45),
#                               (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))
#
#
# def middle(tup: Tuple[tuple, ...]) -> Tuple[tuple, ...]:
#     return tuple(map(lambda x: sum(list(x)) / len(x), tup))
#
#
# print(middle(numbers))

# ЗАДАНИЕ 6 Основы работы с множествами
# Входные данные	Выходные данные
# 12345678910	10
# ab bc	4
# 12321	3
# рррррррррр	1
# hhpppppphh	2
# 12345121273	6
# 1345768зелко	12
# На вход программе подается строка текста. Напишите программу, которая
# определяет количество различных символов в строке.
# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести количество различных символов в строке.
# Примечание. Задачу можно решить в одну строчку кода.
# Тестовые данные

# print(len(set(list(input('Введите строку: ')))))

# ЗАДАНИЕ 7 Основы работы с множествами
# На вход программе подаются две строки, состоящие из цифр. Необходимо
# определить, верно ли, что в записи этих двух строк используются все
# десять цифр?
# Формат входных данных
# На вход подаются две строки, состоящие из цифр.
# Формат выходных данных
# Программа должна вывести YES, если в записи этих двух строк используются
# все десять цифр, и NO в противном случае.
# Тестовые данные

# line1: list = list(input('Введите первую строку: '))
# line2: list = list(input('Введите вторую строку: '))
# answer: str = 'YES' if len(set(line1 + line2)) == 10 else 'NO'
# print(answer)

# ЗАДАНИЕ 8 Методы множеств 1
# Напишите программу для определения общего количества различных слов в
# строке текста.
# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести одно число – общее количество различных слов в
# строке без учета регистра.
# Примечание 1. Словом считается последовательность непробельных символов,
# идущих подряд, слова разделены одним или большим числом пробелов.
# Примечание 2. Знаками препинания .,;:-?! пренебрегаем

# import re
#
# line = re.sub(r'[.,;:\-?!]', '', input('Введите строку: ').lower()).split(' ')
# print(len(set(line)))

# ЗАДАНИЕ 9 Методы множеств 2
# На вход программе подаются две строки текста, содержащие числа. Напишите
# программу, которая выводит все числа в порядке возрастания, которые есть как
# в первой строке, так и во второй.
# Формат входных данных
# На вход программе подаются две строки текста, содержащие числа, отделенные
# символом пробела.
# Формат выходных данных
# Программа должна вывести множество чисел, встречающихся в обеих строках.
# Тестовые данные

# line1 = set(map(int, input('Введите 1 строку чисел: ').split(' ')))
# line2 = set(map(int, input('Введите 2 строку чисел: ').split(' ')))
# print(*sorted(list(line1 & line2)))

# ЗАДАНИЕ 10 Генераторы множеств и frozenset
# Используя генератор множеств, дополните приведенный код так, чтобы получить
# множество, содержащее уникальные слова (в нижнем регистре) строки sentence.
# Результат вывести на одной строке в алфавитном порядке, разделяя элементы
# одним символом пробела.
# Примечание. Учтите, что знаки пунктуации не относятся к словам.

# import re
#
# sentence = '''My very photogenic mother died in a freak accident (picnic,
# lightning) when I was three, and, save for a pocket of warmth in the darkest
# past, nothing of her subsists within the hollows and dells of memory, over
# which, if you can still stand my style (I am writing under observation),
# the sun of my infancy had set: surely, you all know those redolent remnants
# of day suspended, with the midges, about some hedge in bloom or suddenly
# entered and traversed by the rambler, at the bottom of a hill, in the summer
# dusk; a furry warmth, golden midges..'''
#
# sentence = re.sub(r'[.,;:\-?!\(\)]', '', sentence).split()
# sentence = {i for i in sentence if i == i.lower()}
# print(*sentence)