# ЗАДАНИЕ 1 Основы работы с кортежами
# Дополните приведенный код, используя срезы,
# чтобы он вывел все элементы кортежа countries, кроме двух последних и трех первых.
# countries = ('Russia', 'Argentina', 'Slovakia', 'Canada',
# 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')

# countries = ('Russia', 'Argentina', 'Slovakia', 'Canada',
# 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
# print(countries[3:-2])

# ЗАДАНИЕ 2 Основы работы с кортежами
# numbers1 = (1, 2, 3)
# numbers2 = (6,)
# numbers3 = (7, 8, 9, 10, 11, 12, 13)
# Дополните приведенный код, используя операторы конкатенации (+)
# и умножения кортежа на число (*), чтобы он вывел кортеж:
# (1, 2, 3, 1, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13).

# numbers1 = (1, 2, 3)
# numbers2 = (6,)
# numbers3 = (7, 8, 9, 10, 11, 12, 13)
# print(numbers1 * 2 + numbers2 * 9 + numbers3)

# ЗАДАНИЕ 3 Основы работы с кортежами
# tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (), ('d',), ('', ''), ()]
# non_empty_tuples = print(non_empty_tuples)
# Дополните приведенный код, так чтобы получить список,
# содержащий только непустые кортежи исходного списка tuples, не меняя порядка их следования.
# Подсказки:
# Для проверки пустоты кортежа используйте встроенную функцию len().
# Используйте списочное выражение.

# tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (), ('d',), ('', ''), ()]
# print([i for i in tuples if len(i) > 0])

# ЗАДАНИЕ 4 Основы работы с кортежами
# tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
# new_tuples = print(new_tuples)
# Дополните приведенный код так, чтобы переменная new_tuples,
# содержала список кортежей на основе списка tuples с последним элементом
# каждого кортежа, замененным на численное значение 100
# Подсказки:
# Используйте списочное выражение. Чтобы получить все элементы кортежа t
# кроме последнего, используем срез. Чтобы создать кортеж,
# содержащий единственный элемент 100, мы используем (100,).

# tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
# print([i[0:-1] + (100,) for i in tuples])

# ЗАДАНИЕ 5
# Дополните приведенный код так, чтобы он вывел список, содержащий
# средние арифметические значения чисел каждого вложенного кортежа в заданном кортеже кортежей numbers.
# numbers = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))

# numbers = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))
# print([sum(list(i)) // len(i) for i in numbers])

# ЗАДАНИЕ 6 Основы работы с множествами
# Входные данные	Выходные данные
# 12345678910	      10
# ab bc	              4
# 12321	              3
# рррррррррр	      1
# hhpppppphh	      2
# 12345121273	      6
# 1345768зелко	      12
# На вход программе подается строка текста.
# Напишите программу, которая определяет количество различных символов в строке.
# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести количество различных символов в строке.
# Примечание. Задачу можно решить в одну строчку кода.
# Тестовые данные

# print(len(set(input('введи строку '))))

# ЗАДАНИЕ 7 Основы работы с множествами
# На вход программе подаются две строки, состоящие из цифр.
# Необходимо определить, верно ли, что в записи этих двух строк используются все десять цифр?
# Входные данные	           Выходные данные
# 12387
# 94230	                        NO

# 1930
# 2465748	                    YES

# 12368267374924645234
# 134347264344472183	         NO

# 1092473856
# 12847652098765432121	         YES

# 4980
# 123	                         NO

# 908
# 23	                          NO

# 1289371910485765647389201300
# 12345678990081761	              YES

# 9088673542
# 234098456	                       NO

# Формат входных данных
# На вход подаются две строки, состоящие из цифр.
# Формат выходных данных
# Программа должна вывести YES, если в записи этих
# двух строк используются все десять цифр, и NO в противном случае.
# Тестовые данные

# print('YES') if ''.join(sorted(set(input('строка 1 ') + input('строка 2 ')))) == '0123456789' else print('NO')

# ЗАДАНИЕ 8 Методы множеств
# 1 Напишите программу для определения общего количества
# различных слов в строке текста.
# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести одно число – общее количество различных
# слов в строке без учета регистра.
# Примечание 1.
# Словом считается последовательность непробельных символов, идущих
# подряд, слова разделены одним или большим числом пробелов.
# Примечание 2.
# Знаками препинания.,;:-?! пренебрегаем.
# Тестовые данные
# Входные данные                                       Выходные данные
# Milk is white and so is glue, Ghosts
# are white and they say BOO!                                 11
#
# Snowflakes, snowflakes
# falling down.Snowflakes, covering
# up the ground.Making a
# blanket, soft and white.Making
# a blanket in the night.                                     15
#
# Lets make the color pink.
# Lets make the color
# pink. Mixing red and white, I
# think, Well make the color pink.                            12
#
# She sells sea shells on the sea shore;
# The shells that she sells are sea shells
# Im sure. So if she sells sea shells
# on the sea shore, Im sure that the
# shells are sea shore shells.                                13
#
# .d, d; d: d - d ?d !d                                       1
#
# .ddfsd, ddsfsdfsdfsd; ddsssss: dgfhfghfg
# - dsdfsdfsd ?ddsfsdfsdf !dsdfsdfs                           7

# import re
# print(len(set(re.sub(r'[^\w\s]','', input('введи строку').lower()).replace('  ', ' ').split(' '))))

# ЗАДАНИЕ 9 Методы множеств 2
# На вход программе подаются две строки текста, содержащие числа.
# Напишите программу, которая выводит все числа в порядке возрастания,
# которые есть как в первой строке, так и во второй.
# Формат входных данных
# На вход программе подаются две строки текста, содержащие числа, отделенные символом пробела.
# Формат выходных данных
# Программа должна вывести множество чисел, встречающихся в обеих строках.
#
# Тестовые данные
#
# Входные данные	               Выходные данные
# 1 2 3
# 1 2 4 5	                            1 2
#
# 1 3 5
# 5 3 1	                                1 3 5
#
# 1 7 8 9 7 3
# 6 4 3 2 7 3 10 5	                     3 7
#
# 1 2 3 4 5 6 7 8 9 10
# 10 9 8 7 6 5 4 3 2 1	                 1 2 3 4 5 6 7 8 9 10
#
# 9 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8 9	                      1 2 3 4 5 6 7 8 9
#
# 1 3 2
# 4 3 2	                                   2 3
#
# 3 7 4 6 2 3 4 5
# 2 3 4 5 6 4	                           2 3 4 5 6
#
# 3 4 5 1 2 4 5 2
# 4 5 2 3 5 7 2 3 5 6 1	                   1 2 3 4 5
#
# 1234 6754 7 3456 890
# 231 1234 6754 7 78 56 34 890	           7 890 1234 6754

# a = (set([int(x) for x in input('строка 1 ').split()]) & set([int(x) for x in input('строка 2 ').split()]))
# [print(i, end=' ') for i in sorted(a)]

# ЗАДАНИЕ 10 Генераторы множеств и frozenset
# Используя генератор множеств, дополните приведенный код так,
# чтобы получить множество, содержащее уникальные слова (в нижнем регистре)
# строки sentence. Результат вывести на одной строке в алфавитном
# порядке, разделяя элементы одним символом пробела.
# Примечание. Учтите, что знаки пунктуации не относятся к словам.

# import re
# sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and, save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory, over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely, you all know those redolent remnants of day suspended, with the midges, about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''
# [print(i, end=' ') for i in sorted(set(re.sub(r'[^\w\s]','', sentence.lower()).split(' ')))]
